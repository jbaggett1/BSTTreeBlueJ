#BlueJ class context
comment0.target=BSTTreeBlueJ
comment0.text=\n\ Jillian\ Baggett\ \n\ Class\ AVLTree\ is\ a\ basic\ implementaion\ of\ Adelson-Velskii\ and\n\ Landis'\ Balanced\ Binary\ Search\ Tree.\n
comment1.params=
comment1.target=int\ getSize()
comment10.params=node\ element
comment10.target=boolean\ contains(BSTTreeBlueJ.Node,\ java.lang.Comparable)
comment10.text=\n\ As\ for\ insert\ and\ remove,\ a\ private\ helper\ is\ used\ for\ a\ recursive\n\ implementation.\n\ @param\ element\ the\ element\ to\ search\ for\n\ @param\ node\ the\ root\ of\ the\ subtree\ to\ search\ in\n\ @return\ true\ if\ this\ subtree\ contains\ the\ element,\ false\ otherwise\n
comment11.params=node
comment11.target=java.lang.Comparable\ findMin(BSTTreeBlueJ.Node)
comment11.text=\n\ Return\ the\ minimum\ element\ in\ the\ subtree\ rooted\ at\ node\n\ @param\ node\ the\ root\ of\ the\ subtree\n\ @return\ the\ minimum\ element\ in\ this\ subtree\n
comment12.params=node
comment12.target=int\ height(BSTTreeBlueJ.Node)
comment12.text=\n\ Private\ helper\ method\ to\ calculate\ the\ height\ of\ a\ node.\ A\ node's\n\ height\ is\ the\ larger\ of\ its\ left\ and\ right\ subtree's\ heights\ plus\n\ one.\ To\ make\ this\ calculation\ consistent\ and\ easy,\ we\ define\n\ height\ of\ an\ empty\ subtree\ is\ -1.\n\ @param\ node\ the\ node\ to\ calculate\ the\ height\ of\n\ @return\ its\ height\ as\ determined\ by\ the\ heights\ of\ its\ subtrees\n
comment13.params=
comment13.target=java.util.ArrayList\ printTree()
comment14.params=root\ level\ treeString
comment14.target=java.util.ArrayList\ printFullLevel(BSTTreeBlueJ.Node,\ int,\ java.util.ArrayList)
comment2.params=
comment2.target=BSTTreeBlueJ()
comment2.text=\n\ Construct\ an\ empty\ BSTTree\n
comment3.params=element
comment3.target=void\ insert(java.lang.Comparable)
comment3.text=\n\ Insert\ the\ element\ into\ this\ AVLTree.\n\ @param\ element\ the\ element\ to\ insert\ into\ the\ tree.\ Duplicates\ are\n\ allowed\n
comment4.params=element
comment4.target=void\ remove(java.lang.Comparable)
comment4.text=\n\ Remove\ the\ element\ from\ this\ AVLTree.\n\ @param\ element\ the\ element\ to\ remove\n
comment5.params=element
comment5.target=boolean\ contains(java.lang.Comparable)
comment5.text=\n\ Check\ if\ this\ tree\ contains\ the\ element.\n\ @return\ true\ if\ this\ tree\ contains\ the\ element,\ false\ otherwise\n
comment6.params=
comment6.target=java.lang.Comparable\ findMin()
comment6.text=\n\ Return\ the\ minimum\ elemnent\ in\ this\ tree.\n\ @return\ the\ mininum\ element\ in\ this\ tree\n
comment7.params=node\ element
comment7.target=BSTTreeBlueJ.Node\ insert(BSTTreeBlueJ.Node,\ java.lang.Comparable)
comment7.text=\n\ A\ private\ helper\ method\ for\ insertion.\n\ By\ taking\ a\ Node\ as\ a\ parameter,\ we\ can\ write\ this\ method\n\ recursively,\ continuing\ to\ call\ insert\ on\ subtrees\ until\ the\ element\n\ can\ be\ inserted.\n\ @param\ node\ the\ root\ of\ some\ subtree\ of\ this\ AVLTree\n\ @param\ element\ the\ element\ to\ insert\ into\ this\ subtree\n
comment8.params=node\ element
comment8.target=BSTTreeBlueJ.Node\ remove(BSTTreeBlueJ.Node,\ java.lang.Comparable)
comment8.text=\n\ A\ private\ helper\ method\ for\ removal.\n\ By\ taking\ a\ Node\ as\ a\ parameter,\ we\ can\ write\ this\ method\n\ recursively,\ continuing\ to\ call\ remove\ on\ subtrees\ until\ the\ element\n\ is\ removed.\n\ @param\ node\ the\ root\ of\ some\ subtree\ of\ this\ AVLTree\n\ @param\ element\ the\ element\ to\ remove\ from\ this\ subtree\n
comment9.params=node
comment9.target=java.lang.Comparable\ minValue(BSTTreeBlueJ.Node)
numComments=15
